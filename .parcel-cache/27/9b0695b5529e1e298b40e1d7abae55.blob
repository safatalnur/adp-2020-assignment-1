"use strict";

var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");

var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  var _react = _interopRequireWildcard(require("react"));

  var _moment = _interopRequireDefault(require("moment"));

  var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  const ShowWeather = props => _react.default.createElement("div", {
    className: "weather_data"
  }, props.city && props.country && _react.default.createElement("p", {
    className: "weather_key"
  }, "City :", _react.default.createElement("span", {
    className: "weather_value"
  }, props.city, ", ", props.country)), props.temp != null && _react.default.createElement("p", {
    className: "weather_key"
  }, "Temperature :", _react.default.createElement("span", {
    className: "weather_value"
  }, props.temp, "\xB0C")), props.windchill != null && _react.default.createElement("p", {
    className: "weather_key"
  }, "WindChill :", _react.default.createElement("span", {
    className: "weather_value"
  }, props.windchill, "\xB0C")), props.mintemp != null && _react.default.createElement("p", {
    className: "weather_key"
  }, "Min. Temperature :", _react.default.createElement("span", {
    className: "weather_value"
  }, props.mintemp, "\xB0C")), props.maxtemp != null && _react.default.createElement("p", {
    className: "weather_key"
  }, "Max. Temperature :", _react.default.createElement("span", {
    className: "weather_value"
  }, props.maxtemp, "\xB0C")), props.wind != null && _react.default.createElement("p", {
    className: "weather_key"
  }, "Wind Speed :", _react.default.createElement("span", {
    className: "weather_value"
  }, props.wind, "m/sec")), props.sunrise != null && _react.default.createElement("p", {
    className: "weather_key"
  }, "Sunrise :", _react.default.createElement("span", {
    className: "weather_value"
  }, (0, _moment.default)(props.sunrise).format("h:mm:ss a"))), props.sunset != null && _react.default.createElement("p", {
    className: "weather_key"
  }, "Sunset :", _react.default.createElement("span", {
    className: "weather_value"
  }, props.sunset)), props.desc && _react.default.createElement("p", {
    className: "weather_key"
  }, "Description :", _react.default.createElement("span", {
    className: "weather_value"
  }, props.desc)), props.icon && _react.default.createElement("p", {
    className: "weather_key"
  }, _react.default.createElement("span", {
    className: "weather_value"
  }, _react.default.createElement("img", {
    src: `http://openweathermap.org/img/w/${props.icon}.png`
  }))));

  _c = ShowWeather;
  var _default = ShowWeather;
  exports.default = _default;

  var _c;

  $RefreshReg$(_c, "ShowWeather");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}